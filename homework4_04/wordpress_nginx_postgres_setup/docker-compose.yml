services:
  wordpress:
    build:
      context: ./wordpress   # Указываем путь к Dockerfile для WordPress
      dockerfile: Dockerfile
    container_name: wordpress
    restart: always
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DB_NAME: ${DB_NAME}
      DOMAIN_NAME: ${DOMAIN_NAME}  # Добавляем переменную для домена
      WP_ADMIN_USER: ${WP_ADMIN_USER}  # Имя администратора
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}  # Пароль администратора
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}  # Email администратора
    volumes:
      - wordpress_data:/var/www/html
    depends_on:
      - db
    networks:
      - wordpress_network
    ports:
      - "8080:80"
    # command: ["/usr/local/bin/install-wordpress.sh"]  # Запуск скрипта установки WordPres

  php-fpm:
    build:
      context: ./php-fpm  # Указываем путь к Dockerfile для PHP-FPM
      dockerfile: Dockerfile
    container_name: php-fpm
    restart: always
    volumes:
      - wordpress_data:/var/www/html
      - ./wordpress/install-wordpress.sh:/usr/local/bin/install-wordpress.shl
      #- php-fpm-socket:/var/run/php  # Общий том для сокета
      - ./php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ./php-fpm/php-fpm.conf:/usr/local/etc/php-fpm.conf 
    networks:
      - wordpress_network
    #environment:
     # - PHP_FPM_LISTEN=/var/run/php/php-fpm.sock  # Указываем путь к сокету

  nginx:
    build:
      context: ./nginx  # Указываем путь к Dockerfile для Nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - wordpress_data:/var/www/html
      #- php-fpm-socket:/var/run/php  # Общий том для сокета
    depends_on:
      - php-fpm
    networks:
      - wordpress_network
    ports:
      - "80:80"
      - "443:443"

  db:
    image: postgres:latest
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-superuser.sql:/docker-entrypoint-initdb.d/init-superuser.sql  # Добавляем скрипт инициализации
    networks:
      - wordpress_network


  python_server:
    build:
      context: ./python_server  # Указываем путь к Dockerfile для Python-сервера
      dockerfile: Dockerfile
    container_name: python_server
    restart: always
    environment:
      PYTHON_DB_NAME: ${PYTHON_DB_NAME}  # Имя базы данных для Python-сервера
      PYTHON_DB_USER: ${PYTHON_DB_USER}  # Имя пользователя для подключения к базе данных Python-сервера
      PYTHON_DB_PASSWORD: ${PYTHON_DB_PASSWORD}  # Пароль для пользователя базы данных Python-сервера
      SUPERUSER_USERNAME: ${SUPERUSER_USERNAME}  # Имя суперпользователя
      SUPERUSER_PASSWORD: ${SUPERUSER_PASSWORD}  # Пароль суперпользователя
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}  # Разрешенные хосты
      SECRET_KEY: ${SECRET_KEY}  # Секретный ключ
      DEBUG: ${DEBUG}  # Режим отладки
    volumes:
      - ./python_server:/app  # Копируем код приложения в контейнер
    ports:
      - "8000:8000"   
    networks:
      - wordpress_network
    command: python manage.py runserver 0.0.0.0:8000


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: db:5432  # Указываем имя сервиса PostgreSQL
      GF_DATABASE_NAME: ${DB_NAME}  # Имя базы данных WordPress
      GF_DATABASE_USER: ${DB_USER}  # Имя пользователя PostgreSQL
      GF_DATABASE_PASSWORD: ${DB_PASSWORD}  # Пароль пользователя PostgreSQL
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}  # Устанавливаем пароль администратора
    ports:
      - "3000:3000" 
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - wordpress_network

volumes:
  wordpress_data:
  db_data:
  grafana_data: 
  #php-fpm-socket:  # Определение общего тома для сокета

networks:
  wordpress_network:
    driver: bridge  # Указываем драйвер сети