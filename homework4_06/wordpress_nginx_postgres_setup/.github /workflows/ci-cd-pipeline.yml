name: CI/CD Pipeline  # Название пайплайна

on:
  push:
    branches:
      - main  # Запускать пайплайн при пуше в ветку main
  pull_request:
    branches:
      - main  # Запускать пайплайн при создании пулл-реквеста в ветку main

jobs:
  build:  # Определение работы с именем 'build'
    runs-on: ubuntu-latest  # Указать, что работа будет выполняться на последней версии Ubuntu

    steps:  # Шаги, которые будут выполнены в рамках работы
      - name: Checkout code  # Шаг для извлечения кода из репозитория
        uses: actions/checkout@v2  # Использовать действие для извлечения кода

      - name: Load environment variables  # Шаг для загрузки переменных окружения
        run: |  # Загрузка переменных из секретов
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV  
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV  
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV  
          echo "WP_ADMIN_EMAIL=${{ secrets.WP_ADMIN_EMAIL }}" >> $GITHUB_ENV  
          echo "WP_ADMIN_USER=${{ secrets.WP_ADMIN_USER }}" >> $GITHUB_ENV  
          echo "WP_ADMIN_PASSWORD=${{ secrets.WP_ADMIN_PASSWORD }}" >> $GITHUB_ENV  
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> $GITHUB_ENV  
          echo "HTTP_PORT=${{ secrets.HTTP_PORT }}" >> $GITHUB_ENV  
          echo "PYTHON_SERVER_PORT=${{ secrets.PYTHON_SERVER_PORT }}" >> $GITHUB_ENV   
          echo "PYTHON_DB_NAME=${{ secrets.PYTHON_DB_NAME }}" >> $GITHUB_ENV  
          echo "PYTHON_DB_USER=${{ secrets.PYTHON_DB_USER }}" >> $GITHUB_ENV  
          echo "PYTHON_DB_PASSWORD=${{ secrets.PYTHON_DB_PASSWORD }}" >> $GITHUB_ENV  
          echo "SUPERUSER_USERNAME=${{ secrets.SUPERUSER_USERNAME }}" >> $GITHUB_ENV   
          echo "SUPERUSER_PASSWORD=${{ secrets.SUPERUSER_PASSWORD }}" >> $GITHUB_ENV  
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> $GITHUB_ENV  
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV  
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV  
          echo "SERVER_IP=${{ secrets.SERVER_IP }}" >> $GITHUB_ENV  
          echo "GF_ADMIN_PASSWORD=${{ secrets.GF_ADMIN_PASSWORD }}" >> $GITHUB_ENV  

      - name: Set up Docker Buildx  # Шаг для настройки Docker Buildx
        uses: docker/setup-buildx-action@v1  # Использовать действие для настройки Buildx

      - name: Build Docker images  # Шаг для сборки Docker-образов
        run: |  
          docker build -t wordpress_nginx_postgres_setup-wordpress:latest ./wordpress  # Сборка образа WordPress
          docker build -t wordpress_nginx_postgres_setup-php-fpm:latest ./php-fpm  # Сборка образа PHP-FPM
          docker build -t wordpress_nginx_postgres_setup-nginx:latest ./nginx  # Сборка образа Nginx
          docker build -t wordpress_nginx_postgres_setup-python_server:latest ./python_server  # Сборка образа Python-сервера

      - name: Pull Grafana Docker image  # Шаг для загрузки образа Grafana
        run: |
          docker pull grafana/grafana:latest  # Загрузка последней версии образа Grafana

      - name: Pull PostgreSQL Docker image  # Шаг для загрузки образа PostgreSQL
        run: |
          docker pull postgres:latest  # Загрузка последней версии образа PostgreSQL

      - name: Test Docker containers  # Шаг для тестирования Docker-контейнеров
        run: |  # Выполнение нескольких команд
          docker run -d --name test_wordpress -p ${{ env.HTTP_PORT }}:80 wordpress_nginx_postgres_setup-wordpress:latest  # Запуск контейнера WordPress
          sleep 30  # Ожидание 30 секунд для инициализации
          curl -f http://localhost:${{ env.HTTP_PORT }} || exit 1  # Проверка доступности WordPress
          docker stop test_wordpress  # Остановка контейнера WordPress
          docker rm test_wordpress  # Удаление контейнера WordPress

          docker run -d --name test_grafana -p 3000:3000 grafana/grafana:latest  # Запуск контейнера Grafana
          sleep 30  # Ожидание 30 секунд для инициализации
          curl -f http://localhost:3000 || exit 1  # Проверка доступности Grafana
          docker stop test_grafana  # Остановка контейнера Grafana
          docker rm test_grafana  # Удаление контейнера Grafana

      - name: Deploy to remote server  # Шаг для развертывания на удаленном сервере
        env:  # Определение переменных окружения для этого шага
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Загрузка приватного ключа SSH из секретов
          REMOTE_USER: ${{ secrets.REMOTE_USER }}  # Загрузка имени пользователя удаленного сервера из секретов
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}  # Загрузка адреса удаленного сервера из секретов
        run: |  
          echo "$SSH_PRIVATE_KEY" > private_key  # Сохранение приватного ключа в файл
          chmod 600 private_key  # Установка прав доступа к файлу ключа
          #  Замените /path/to/deploy/ на полный путь к директории, где будет храниться docker-compose.yml:
          scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml $REMOTE_USER@$REMOTE_HOST:/path/to/deploy/  # Копирование файла docker-compose.yml на удаленный сервер
          ssh -i private_key -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cd /path/to/deploy && docker-compose pull && docker-compose up -d"  # Подключение к удаленному серверу и запуск контейнеров с помощью docker-compose